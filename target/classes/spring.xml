<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	>

	<!-- 自动扫描dao和service包(自动注入) 
		Spring 2.5 提供了 
		AutowiredAnnotationBeanPostProcessor、
		CommonAnnotationBeanPostProcessor、
		 PersistenceAnnotationBeanPostProcessor 
		 和 RequiredAnnotationBeanPostProcessor
		 可以使用 <context:annotation-config /> 
		 来方便地、一次性的
		 声明这四个 BeanPostProcessor
		 Spring 2.1 添加了一个新的 context 的 Schema 命名空间
	 	当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了
	 -->
	<context:annotation-config />
	<context:component-scan base-package="com.sict.*" use-default-filters="true" />
	
	<!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

	<!--  Druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
	
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
	
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
	
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
	
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
	
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean> 
    	
    <!-- 创建SqlSessionFactory，同时指定数据源-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource" /> 
	    <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->
	    <property  name="configLocation"  value="classpath:sqlMapConfig.xml"/>
	    <!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件
	    <property  name="mapperLocations"  value="classpath*:com/xxt/ibatis/dbcp/**/*.xml"/>   -->
	</bean>
	<bean id="exceptionHandler" class="com.sict.controller.MyExceptionHandler"/> 
	<bean id="sqlSession"	class="org.mybatis.spring.SqlSessionTemplate"> 
      <constructor-arg index="0" ref="sqlSessionFactory" /> 
	</bean>
	 <!-- 为StartUpListener注入dao by zcg 20141112 -->  
  	<!-- <bean id="roleDao" class="com.sict.dao.RoleDao"></bean> -->
	 <!-- 为StartUpListener注入dao by zcg 20141112 -->  
  	<!-- <bean id="lookUpService" class="com.sict.service.LookUpService"></bean> -->
  
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.sict.dao.mapper" />  
    </bean>      
    <bean id="sysMenuService" class="com.sict.service.SysMenuService">
	</bean>
</beans>