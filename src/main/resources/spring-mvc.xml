<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 加载缺省验证和转换模块 -->
	<mvc:annotation-driven />

	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.sict.controller" />

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 上传文件时需要做的配置 -->
	<!-- 支持上传文件 -->
	<!-- 多部分文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>





	<!-- 注释by 郑春光 合并就业材料报表 张超 2015年1月28日
	根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json /blog/1.xml	
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		设置为true以忽略对Accept Header的支持
		<property name="ignoreAcceptHeader" value="true" />
		在没有扩展名时即: "/user/1" 时的默认展现形式
		<property name="defaultContentType" value="text/html" />

		扩展名至mimeType的映射,即 /user.json => application/json
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		用于开启 /userinfo/123?format=json 的支持
		<property name="favorParameter" value="false" />
		<property name="defaultViews">
			<list>
				for application/json
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
				for application/xml
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView" 
					> <property name="marshaller"> <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/> 
					</property> </bean>
			</list>
		</property>
	</bean> -->
	
	
	
	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass">
			<value> org.springframework.web.servlet.view.JstlView</value>
		</property>
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 桑博，增加权限控制——问卷调查 -->
	<mvc:interceptors>
		<bean class="com.sict.interceptor.LoginAnnotationInterceptor"></bean>
		<bean class="com.sict.interceptor.AuthorityAnnotationInterceptor"></bean>
	</mvc:interceptors>
	
	
	
	<!-- 对报表视图进行解析 -->
	<bean id="xmlResolver"
		class="org.springframework.web.servlet.view.XmlViewResolver">
		<property name="location" value="/WEB-INF/jasper-views.xml" />
		<property name="order" value="1" />
	</bean>
	
	
	
	
	<!-- 定时装置所要执行的任务所在的类 业务类不需要继承任何父类，也不需要实现任何接口，只是一个普通的java类。 -->
	<bean id="jobslip" class="com.sict.service.ScoreService" />
	<!-- 引用任务描述 -->
	<bean id="methodInvokingJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<!-- 引用任务方法所在的类 -->
			<ref bean="jobslip" />
		</property>
		<property name="targetMethod">
			<!-- 指定任务方法名称 -->
			<value>temporaryAccomplish</value>
		</property>
	</bean>
	<!-- 配置触发器 -->
	<bean id="jobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
		<property name="jobDetail">
			<!-- 引用任务描述bean -->
			<ref bean="methodInvokingJobDetail" />
		</property>
		<property name="startDelay">
		<value>5000</value> <!--延迟 5秒 -->
		</property>
		<property name="cronExpression">
			<!-- 秒 分 时 日 月 周 年 -->
			<value>0 0 23 * * ?</value><!--每天晚上十一点执行插入最新数据  -->
			<!-- 每天一点触发 -->
		</property>
	</bean>
	
	<!-- 定时装置所要执行的任务所在的类 业务类不需要继承任何父类，也不需要实现任何接口，只是一个普通的java类。 -->
	<bean id="jobslip2" class="com.sict.service.PracticeTaskService" />
	<!-- 引用任务描述 -->
	<bean id="methodInvokingJobDetail2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<!-- 引用任务方法所在的类 -->
			<ref bean="jobslip2" />
		</property>
		<property name="targetMethod">
			<!-- 指定任务方法名称 -->
			<value>insertMapDeptementStudentDistribution</value>
		</property>
	</bean>
	<!-- 配置触发器 -->
	<bean id="jobTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
		<property name="jobDetail">
			<!-- 引用任务描述bean -->
			<ref bean="methodInvokingJobDetail2" />
		</property>
		<property name="startDelay">
		<value>0</value> <!--延迟 5秒 -->
		</property>
		<property name="cronExpression">
			<!-- 秒 分 时 日 月 周 年 -->
			<value>0 30 23 * * ?   </value><!--每天晚上十一点半执行插入最新数据  -->
			<!-- 每天一点触发 -->
		</property>
	</bean>
	<!-- 定时装置所要执行的任务所在的类 业务类不需要继承任何父类，也不需要实现任何接口，只是一个普通的java类。 -->
	<bean id="jobslip3" class="com.sict.service.PracticeTaskService" />
	<!-- 引用任务描述 -->
	<bean id="methodInvokingJobDetail3" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<!-- 引用任务方法所在的类 -->
			<ref bean="jobslip3" />
		</property>
		<property name="targetMethod">
			<!-- 指定任务方法名称 -->
			<value>temporaryAccomplish1</value>
		</property>
	</bean>
	<!-- 配置触发器 -->
	<bean id="jobTrigger3" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 这里不可以直接在属性jobDetail中引用taskJob，因为他要求的是一个jobDetail类型的对象，所以我们得通过MethodInvokingJobDetailFactoryBean来转一下 -->
		<property name="jobDetail">
			<!-- 引用任务描述bean -->
			<ref bean="methodInvokingJobDetail3" />
		</property>
		<property name="startDelay">
		<value>0</value> <!--延迟 5秒 -->
		</property>
		<property name="cronExpression">
			<!-- 秒 分 时 日 月 周 年 -->
			<value>0 20 22 * * ?   </value><!--每天晚上十点半执行插入最新数据  -->
			<!-- 每天一点触发 -->
		</property>
	</bean>

	<!-- 配置任务工厂, 只能有一个这种bean -->
	<bean id="schedulerFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">

		<!-- 添加触发器 -->
		<property name="triggers">
			<list>
				<ref local="jobTrigger" />
				<ref local="jobTrigger2" />
				<ref local="jobTrigger3" /> 
			</list>
		</property>
	</bean>
	
	
	
	
</beans>